---
/**
 * ReviewRatings Component
 * Single Responsibility: Display rating breakdown with explanations
 */

interface Props {
  ratingsData: {
    overall: number;
    categories: Array<{
      name: string;
      score: number;
      explanation: string;
      weight: number;
      maxScore: number;
    }>;
    methodology: string;
  };
}

const { ratingsData } = Astro.props;
---

{ratingsData && (
  <div class="bg-gray-800 rounded-2xl shadow-xl p-8 mb-8 border border-gray-700">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-bold text-white">Rating Breakdown</h2>
      <a 
        href={ratingsData.methodology} 
        class="text-amber-600 hover:text-amber-700 text-sm font-medium"
      >
        How We Rate â†’
      </a>
    </div>
    
    <div class="grid md:grid-cols-2 gap-6">
      {ratingsData.categories?.map?.(category => (
        <div class="border-b border-gray-700 pb-4">
          <div class="flex justify-between items-center mb-2">
            <span class="font-medium text-white">{category.name}</span>
            <span class="font-bold text-amber-600 text-lg">
              {category.score.toFixed(1)}/{category.maxScore}
            </span>
          </div>
          
          <!-- Rating Bar -->
          <div class="w-full bg-gray-700 rounded-full h-3 mb-2">
            <div 
              class="bg-gradient-to-r from-amber-400 to-amber-600 h-3 rounded-full transition-all duration-300 rating-bar"
              data-score={category.score}
              data-max-score={category.maxScore}
            ></div>
          </div>
          
          <p class="text-sm text-gray-300 mt-2">{category.explanation}</p>
          <span class="text-xs text-gray-400">Weight: {(category.weight * 100).toFixed(0)}%</span>
        </div>
      ))}
    </div>
  </div>
)}

{!ratingsData && (
  <div class="bg-gray-800 rounded-2xl p-8 mb-8 text-center border border-gray-700">
    <p class="text-gray-300">Rating breakdown will be available soon.</p>
  </div>
)}